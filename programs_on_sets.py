# -*- coding: utf-8 -*-
"""PROGRAMS ON SETS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K5vQHzUTYuVNM02ZFLql3XeoyhJhvZ7h

# **PROGRAMS** **ON** **SETS**
"""

# 1) Write a Python program to create and access values stored in a set.
# Creating a set
set1 = set(["Geeks", "For", "Geeks"])
print("\nInitial set")
print(set1)

# Accessing element using
# for loop
print("\nElements of set: ")
for i in set1:
    print(i, end=" ")

# Checking the element
# using in keyword
print("Geeks" in set1)

# 2) Write a Python program to get user inputs and display the values with index and position no. using loop.
s = set()
n = int(input("Enter number of elements : "))
for i in range(n):
    a = input("Enter the value:")
    s.update(a)
print(s)
for ind,i in enumerate(s):
    print(ind,"-",i,end=",")

# 3) Write a Python program to add member(s) in a set.
color_set = set()
print(color_set)
print("\nAdd single element:")
color_set.add("Red")
print(color_set)
print("\nAdd multiple items:")
color_set.update(["Blue", "Green"])
print(color_set)

# 4) Write a Python program to copy member(s) in a set.
set1 = {1, 2, 3, 4}
set2 = set1.copy()
print(set2)

# 5) Write a Python program to find the length of a set.
set1 = set()
set1.add(8)
set1.add(9)
set1.add((6, 7))
print("The length of set is:", len(set1))

# 6) Write a Python program to remove item(s) from set.
num_set = set([0, 1, 3, 4, 5])
print("Original set:")
print(num_set)
num_set.pop()
print("\nAfter removing the first element from the said set:")
print(num_set)

# 7) Write a Python program to remove an item from a set if it is present in the set.
def Remove(sets):
    sets.discard(20)
    print (sets)
# Driver Code
sets = set([10, 20, 26, 41, 54, 20])
Remove(sets)

# 8) Write a Python program to make three sets of random integers and find intersection, union, set difference and symmetric difference between sets.
# INTERSECTION :-
set1 = {1, 2}
set2 = {1, 3}
set3 = {1, 4}
intersection = set.intersection(set1, set2, set3)
print(intersection)
print("************")
# UNION :-
s1 = {'Python', 'Java'}
s2 = {'C#', 'Java'}
s3 = {'Java', 'SQL'}
s = s1 | s2 | s3
print(s)
print("************")
# SET DIFFERENCE :-
s1 = {'Python', 'Java', 'C++'}
s2 = {'C#', 'Java', 'C++'}
s3 = {'SQL', 'Matlab', 'C++', 'Java', 'C#'}
s = s1.difference(s2,s3)
print(s)
print("************")
# SYMMETRIC DIFFERENCE :-
X = {1, 2, 3}
# Set Y
Y = {2, 3, 4}
# Set Z
Z = {2, 3, 4}
print("Symmetric difference between X & Y", X.symmetric_difference(Y))
print("Symmetric difference between Y & Z", Y.symmetric_difference(Z))
print("Symmetric difference between X & X", X.symmetric_difference(X))

# 9) Write a Python program to find maximum and the minimum value in a set.
setn = {5, 10, 3, 15, 2, 20}
print("Original set elements:")
print(setn)
print(type(setn))
print("\nMaximum value of the said set:")
print(max(setn))
print("\nMinimum value of the said set:")
print(min(setn))

# 10) Write a Python program that has a list of countries. Create a set of the countries and print the names of the countries in sorted order.
lst = ['INDIA', 'FRANCE', 'ITALY', 'CHINA', 'SOUTH KOREA', 'JAPAN', 'AMERICA', 'AUSTRALIA']
sortedlst = sorted(lst)
print(sortedlst)

# 11) Write a Python program that creates two sets: Armstrong and strong number in range 10 – 10000.
import math
l=int(input("enter the lowest limit:"))
u=int(input("enter the upper limit:"))
ams=set()
print("AMSTRONG NUMBER")
for num in range(l,u+1):
    order=len(str(i))
    sum=0
    temp=num
    while temp>0:
        digit=temp%10
        sum+=digit**order
        temp//=10
    if num==sum:
        a=str(num)
        ams.update(a)
print(ams)
print("STRONG NUMBER")
st=set()
for j in range(l,u+1):
    temp=j
    sum=0
    while(temp>0):
        rem=temp%10
        fact=math.factorial(rem)
        sum=sum+fact
        if(sum==j):
            b=str(j)
            st.update(b)
print(st)
#update
st.update('145')
print(st)
#pop
ams.pop()
print(ams)
#remove
ams.remove('3')
print(ams)
#discard
ams.discard('9')
print(ams)
#odd
st.add('145')
print(st)
#clear
print(ams.clear())

# 12) Demonstrate the use of update (), pop (), remove (), discard (), add () and clear () functions.
# UPDATE :-
list1 = [1, 2, 3]
list2 = [5, 6, 7]
list3 = [10, 11, 12]
set1 = set(list2)
set2 = set(list1)
set1.update(set2)
print(set1)
set1.update(list3)
print(set1)
print("**************")
# POP :-
S = {"LILLY", "PERCY", "NICO", "JASON", "LEO"}
print(S)
print("**************")
# Popping three elements and printing them
print(S.pop())
print(S.pop())
print(S.pop())
print("Updated set is", S)
print("**************")
# REMOVE :-
def Remove(sets):
    sets.remove("ARES")
    print (sets)
sets = set(["ZEUS", "POSEIDON", "HADES", "APOLLO", "ARES"])
Remove(sets)
print("**************")
# DISCARD :-
def Remove(sets):
    sets.discard(20)
    print (sets)
sets = set([10, 20, 26, 41, 54, 20])
Remove(sets)
print("**************")
# ADD :-
PERCY = {'p', 'e', 'r'}
PERCY.add('c')
print('Letters are:', PERCY)
PERCY.add('y')
print('Letters are:', PERCY)
print("**************")
# CLEAR :-
LILLY = {'l', 'i', 'l', 'l', 'y'}
print('LILLY before clear:', LILLY)
LILLY.clear()
print('LILLY after clear:', LILLY)
print("**************")

# 13) Write a Python program to find the common elements in three lists using sets.
def IntersecOfSets(arr1, arr2, arr3):
    # Converting the arrays into sets
    s1 = set(arr1)
    s2 = set(arr2)
    s3 = set(arr3)

    # Calculates intersection of
    # sets on s1 and s2
    set1 = s1.intersection(s2)         #[80, 20, 100]

    # Calculates intersection of sets
    # on set1 and s3
    result_set = set1.intersection(s3)

    # Converts resulting set to list
    final_list = list(result_set)
    print(final_list)

# Driver Code
if __name__ == '__main__' :

    # Elements in Array1
    arr1 = [1, 5, 10, 20, 40, 80, 100]

    # Elements in Array2
    arr2 = [6, 7, 20, 80, 100]

    # Elements in Array3
    arr3 = [3, 4, 15, 20, 30, 70, 80, 120]

    # Calling Function
    IntersecOfSets(arr1, arr2, arr3)

# 14) Write a Python program for Cartesian product of any number of sets. i.e. To compute the product of set-1 and set-2 at the beginning
# and then the resultant of set-1 and set-2 will have a product with set-3
# and then the resultant of set-1, set-2, set-3 will have a Cartesian product with set-4 and so on till set-n.
# function to find cartesian product of two sets
def cartesianProduct(set_a, set_b):
    result =[]
    for i in range(0, len(set_a)):
        for j in range(0, len(set_b)):

            # for handling case having cartesian
            # product first time of two sets
            if type(set_a[i]) != list:
                set_a[i] = [set_a[i]]

            # coping all the members
            # of set_a to temp
            temp = [num for num in set_a[i]]

            # add member of set_b to
            # temp to have cartesian product
            temp.append(set_b[j])
            result.append(temp)

    return result

# Function to do a cartesian
# product of N sets
def Cartesian(list_a, n):

    # result of cartesian product
    # of all the sets taken two at a time
    temp = list_a[0]

    # do product of N sets
    for i in range(1, n):
        temp = cartesianProduct(temp, list_a[i])

    print(temp)

# Driver Code
list_a = [[1, 2],          # set-1
          ['A'],          # set-2
          ['x', 'y', 'z']]   # set-3

# number of sets
n = len(list_a)

# Function is called to perform
# the cartesian product on list_a of size n
Cartesian(list_a, n)

# 15) Write a Python program to count number of vowels using sets in given string.
def vowel_count(str):
    count = 0
    vowel = set("aeiouAEIOU")
    for alphabet in str:
        if alphabet in vowel:
            count = count + 1
    print("No. of vowels :", count)
str = "Persephone"
vowel_count(str)

# 16) Write a program to demonstrate python Set difference for finding lost element from a duplicated array.
def lostElement(A,B):

     # convert lists into set
     A = set(A)
     B = set(B)

     # take difference of greater set with smaller
     if len(A) > len(B):
         print (list(A-B))
     else:
         print (list(B-A))

# Driver program
if __name__ == "__main__":
    A = [1, 4, 5, 7, 9]
    B = [4, 5, 7, 9]
    lostElement(A,B)

# 17) Write a Python program to Minimum number of subsets with distinct elements using Counter.
# function to find Minimum number of subsets
# with distinct elements
from collections import Counter

def minSubsets(input):

     # calculate frequency of each element
     freqDict = Counter(input)

     # get list of all frequency values
     # print maximum from it
     print (max(freqDict.values()))

# Driver program
if __name__ == "__main__":
    input = [1, 2, 3, 3]
    minSubsets(input)

# 18) Write a Python program to Check if two lists have at-least one element common
def common_data(list1, list2):
    result = False

    # traverse in the 1st list
    for x in list1:

        # traverse in the 2nd list
        for y in list2:

            # if one common
            if x == y:
                result = True
                return result

    return result

# driver code
a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
print(common_data(a, b))

a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9]
print(common_data(a, b))

# 19) Write a Python program to check whether the given string is PANGRAM or not.i.e pangram is a sentence containing every letter in the English Alphabet.
# Lowercase and Uppercase are considered the same.
import string

alphabet = set(string.ascii_lowercase)

def ispangram(string):
    return set(string.lower()) >= alphabet

# Driver code
string = "The quick brown fox jumps over the lazy dog"
if(ispangram(string) == True):
    print("Yes")
else:
    print("No")

# 20) Write a Python program to do union in ‘N’ lists.
A=list()
B=list()
n=int(input("Enter the size of the List ::"))
print("Enter the Element of first list::")
for i in range(int(n)):
   k=int(input(""))
   A.append(k)
print("Enter the Element of second list::")
for i in range(int(n)):
   k=int(input(""))
   B.append(k)
   C = A + B
print("THE FINAL LIST IS ::>",C)

# 21) Write a Python program for the following:
# a. Find Union and intersection of 2 sorted lists.
lst1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]
lst2 = [9, 9, 74, 21, 11, 26, 28, 54, 87]
sortedlst1 = sorted(lst1)
print("**********SORTED LIST 1*************")
print(sortedlst1)
print("**********SORTED LIST 2*************")
sortedlst2 = sorted(lst2)
print(sortedlst2)
# UNION:-
lstu = list(set().union(sortedlst1,sortedlst2))
print("***************UNION****************")
print(lstu)
# INTERSECTION:-
set1 = set(sortedlst1)
set2 = set(sortedlst2)
lsti = set1.intersection(set2)
result = list(lsti)
print("***********INTERSECTION*************")
print(result)
# b. Find Union and intersection of 2 Unsorted lists.
lstt1 = [4, 9, 1, 17, 11, 26, 28, 54, 69]
lstt2 = [9, 9, 74, 21, 11, 26, 28, 54, 87]
# UNION:-
lsttu = list(set().union(lst1,lst2))
print("***************UNION****************")
print(lsttu)
# INTERSECTION:-
set1 = set(lstt1)
set2 = set(lstt2)
lstti = set1.intersection(set2)
result = list(lstti)
print("***********INTERSECTION*************")
print(result)